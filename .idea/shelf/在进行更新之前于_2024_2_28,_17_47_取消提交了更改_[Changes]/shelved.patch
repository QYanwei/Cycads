Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10 (Cycads)\" project-jdk-type=\"Python SDK\" />\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 1d1c721df106c50e2ff22c89675ed0028efb002d)
+++ b/.idea/misc.xml	(date 1709113668577)
@@ -1,4 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (Cycads)" project-jdk-type="Python SDK" />
+  <component name="Black">
+    <option name="sdkName" value="Python 3.11" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: src/fq_datum.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env python3\n# coding: utf-8\nimport re,os,sys,time\nimport json\nimport pyfastx\n\nimport numpy as np\nfrom threading import Thread\nfrom collections import Counter\n\ndef readGCcontent(seq):\n    C = seq.count(\"C\")\n    G = seq.count(\"G\")\n    GC = round( (C+G)/len(seq), 3)\n    return GC\n\ndef readAvgQscore(quali):\n    read_length = len(quali)\n    value_list = Counter( list(quali) )\n    value_sum = sum([ k * v for k, v in value_list.items() ])\n    read_qscore = round(value_sum / read_length, 3)\n    return read_qscore\n\ndef endBaseHeadParse(seq, shift_length, endBaseQual_dict):\n    i = 0\n    for b in seq[:shift_length]:\n        endBaseQual_dict['HeadBaseContent_dict'][b][i] += 1\n        i += 1\n    endBaseQual_dict['HeadBaseContent_dict']['S'] += 1\n    return endBaseQual_dict\ndef endBaseTailParse(seq, shift_length, endBaseQual_dict):\n    i = 0\n    for b in seq[-shift_length:]:\n        endBaseQual_dict['TailBaseContent_dict'][b][i] += 1\n        i += 1\n    endBaseQual_dict['TailBaseContent_dict']['S'] += 1\n    return endBaseQual_dict\ndef endQualHeadParse(seq, quali, shift_length, endBaseQual_dict):\n    i = 0\n    if '@' in seq:\n        print(seq)\n    for b in seq[:shift_length]:\n        endBaseQual_dict['HeadQualContent_dict'][b][i] += quali[:shift_length][i]\n        i += 1\n    endBaseQual_dict['HeadQualContent_dict']['S'] += 1\n    return endBaseQual_dict\ndef endQualTailParse(seq, quali, shift_length, endBaseQual_dict):\n    i = 0\n    for b in seq[-shift_length:]:\n        endBaseQual_dict['TailQualContent_dict'][b][i] += quali[-shift_length:][i]\n        i += 1\n    endBaseQual_dict['TailQualContent_dict']['S'] += 1\n    return endBaseQual_dict\ndef read_quality_to_bin_score(base_qual_list: list, split_number_of_read_length: int):\n    div, mod = divmod(len(base_qual_list), split_number_of_read_length)\n    qs_in_percentage_pos = [sum(base_qual_list[i * div + min(i, mod):(i+1) * div + min(i+1, mod)])/len(base_qual_list[i * div + min(i, mod):(i+1) * div + min(i+1, mod)]) for i in range(split_number_of_read_length)]\n    return qs_in_percentage_pos\ndef allBaseQualParse(quali, split_part_num, allBaseQual_dict):\n    if len(quali) >= split_part_num:\n        qv_in_percentage_pos = read_quality_to_bin_score(quali, split_part_num)\n        for j in range(split_part_num):\n            allBaseQual_dict['PercentBaseQual_dict']['Q'][j] += qv_in_percentage_pos[j]\n        allBaseQual_dict['PercentBaseQual_dict']['S'] += 1\n    return allBaseQual_dict\n\ndef endBaseQualParse(seq, quali, shift_length, endBaseQual_dict):\n    if len(seq) > shift_length * 2 and '@' not in seq:\n        threads = []\n        threads.append(Thread(target=endBaseHeadParse, args=(seq, shift_length, endBaseQual_dict)))\n        threads.append(Thread(target=endBaseTailParse, args=(seq, shift_length, endBaseQual_dict)))\n        threads.append(Thread(target=endQualHeadParse, args=(seq, quali, shift_length, endBaseQual_dict)))\n        threads.append(Thread(target=endQualTailParse, args=(seq, quali, shift_length, endBaseQual_dict)))\n        for fun in threads:\n            fun.start()\n    return endBaseQual_dict\ndef kmerSpectrumParse(fq_path, kmer_size, output_dir):\n    kmersize = kmer_size\n    output = output_dir\n    pwd_config_file = os.path.realpath(__file__)\n    meryl = '/'.join(pwd_config_file.split('/')[:-1]) + '/tools/meryl'\n    if fq_path.endswith('gz'):\n        os.system('gunzip -c {}|awk \\'NR %4 == 1 || NR %4 == 2 \\'   > {}.fasta '.format(fq_path, output))\n        os.system('{} count  k={} {}.fasta output {}.meryl'.format(meryl, str(kmersize), output, output))\n        os.system('{} print {}.meryl |sort -k2nr > {}_kmer_{}_freq.txt'.format(meryl, output, output, str(kmersize)))\n        os.system('rm -f {}.fasta'.format(output))\n        os.system('rm -rf {}.meryl'.format(output))\n    elif fq_path.endswith('fastq') or self.args.input.endswith('fq'):\n        os.system('awk \\'NR %4 == 1 || NR %4 == 2 \\'   > {}.fasta '.format(fq_path, output))\n        os.system('{} count  k={} {}.fasta output {}.meryl'.format(meryl, str(kmersize), output, output))\n        os.system('{} print {}.meryl | sort -k2nr > {}_kmer_{}_freq.txt'.format(meryl, output, output, str(kmersize)))\n        os.system('rm -f {}.fasta'.format(output))\n        os.system('rm -rf {}.meryl'.format(output))\n    else:\n        print('please determining the input file suffix is fastq or fq or fq.gz!')\n# kmerSpectrumParse('../test/ecoli.fq.gz', 5, '../test/')\ndef homopolymerParse(seq, homopolymer_size_min, homopolymer_dict):\n    ATCG = ['A', 'G', 'C', 'T']\n    for base in ATCG:\n        patterns = re.compile(r\"%s{%d,}\" % (base, homopolymer_size_min))\n        homostring_dict = dict(Counter(patterns.findall(seq)))\n        if len(homostring_dict ):\n            for homostring, homofreq in homostring_dict.items():\n                homolen = len(homostring)\n                if homolen in  homopolymer_dict[base].keys():\n                    homopolymer_dict[base][homolen] += homofreq\n                else:\n                    homopolymer_dict[base][homolen] = homofreq\n    return homopolymer_dict\n\ndef readParse(read, seqdict):\n    seqdict['ID'].append(read.id)\n    seqdict['GC'].append(readGCcontent(read.seq))\n    seqdict['LEN'].append(len(read.seq))\n    seqdict['QUAL1'].append(float(read.name.split('_')[-1]))\n    seqdict['QUAL2'].append(readAvgQscore(read.quali))\n    return seqdict\ndef random_readnum(seed_num, read_size, sample_num):\n    np.random.seed(seed_num)\n    sample_list = np.random.randint(1, read_size, (1, sample_num) )\n    return sample_list\ndef sampling_analyser(fq, seed_num, read_num):\n    seqdict = dict( {'ID': [], 'GC': [], 'LEN': [], 'QUAL1': [], 'QUAL2':[]} ) # QUAL1: read basecall Q, QUAL2: read average Q\n    homopolymer_size_min = 5\n    homopolymer_dict = {'A':{}, 'G':{}, 'C':{}, 'T':{}}\n    shift_length = 200\n    endBaseQual_dict = {\n                    'HeadBaseContent_dict': {'A': [0]*shift_length, 'G': [0]*shift_length, 'C': [0]*shift_length, 'T': [0]*shift_length, 'S':0},\n                    'TailBaseContent_dict': {'A': [0]*shift_length, 'G': [0]*shift_length, 'C': [0]*shift_length, 'T': [0]*shift_length, 'S':0},\n                    'HeadQualContent_dict': {'A': [0]*shift_length, 'G': [0]*shift_length, 'C': [0]*shift_length, 'T': [0]*shift_length, 'S':0},\n                    'TailQualContent_dict': {'A': [0]*shift_length, 'G': [0]*shift_length, 'C': [0]*shift_length, 'T': [0]*shift_length, 'S':0},\n                    }\n    split_part_num = 100\n    allBaseQual_dict = {\n                    'PercentBaseQual_dict': {'Q':[0]* split_part_num, 'S':0} # Q: average quality, S: base count\n    }\n    sample_list = random_readnum(seed_num, len(fq), read_num)[0]\n    for i in sample_list:\n        read = fq[i]\n        seqdict = readParse(read, seqdict)\n        homopolymer_dict = homopolymerParse(read.seq, homopolymer_size_min, homopolymer_dict)\n        endBaseQual_dict = endBaseQualParse(read.seq, read.quali, shift_length, endBaseQual_dict)\n        allBaseQual_dict = allBaseQualParse(read.quali, split_part_num, allBaseQual_dict)\n    return seqdict, homopolymer_dict, endBaseQual_dict, allBaseQual_dict\n\ndef overall_analyser(fq):\n    seqdict = dict( {'ID': [], 'GC': [], 'LEN': [], 'QUAL1': [], 'QUAL2': []} )  # QUAL1: read basecall Q, QUAL2: read average Q\n    homopolymer_size_min = 5\n    homopolymer_dict = {'A':{}, 'G':{}, 'C':{}, 'T':{}}\n    shift_length = 200\n    endBaseQual_dict = {\n                    'HeadBaseContent_dict': {'A': [0]*shift_length, 'G': [0]*shift_length, 'C': [0]*shift_length, 'T': [0]*shift_length, 'S':0},\n                    'TailBaseContent_dict': {'A': [0]*shift_length, 'G': [0]*shift_length, 'C': [0]*shift_length, 'T': [0]*shift_length, 'S':0},\n                    'HeadQualContent_dict': {'A': [0]*shift_length, 'G': [0]*shift_length, 'C': [0]*shift_length, 'T': [0]*shift_length, 'S':0},\n                    'TailQualContent_dict': {'A': [0]*shift_length, 'G': [0]*shift_length, 'C': [0]*shift_length, 'T': [0]*shift_length, 'S':0},\n                    }\n    split_part_num = 100\n    allBaseQual_dict = {\n                    'PercentBaseQual_dict': {'Q':[0]* split_part_num, 'S':0} # Q: average quality, S: base count\n    }\n    for read in fq:\n        seqdict = readParse(read, seqdict)\n        homopolymer_dict = homopolymerParse(read.seq, homopolymer_size_min, homopolymer_dict)\n        endBaseQual_dict = endBaseQualParse(read.seq, read.quali, shift_length, endBaseQual_dict)\n        allBaseQual_dict = allBaseQualParse(read.quali, split_part_num, allBaseQual_dict)\n    return seqdict, homopolymer_dict, endBaseQual_dict, allBaseQual_dict\n\n# fq = pyfastx.Fastq('../test/ecoli.fq.gz')\n# seq_qual_dict1, homopolymer_dict1, endBaseQual_dict1, allBaseQual_dict1  = sampling_analyser(fq, 1, 100)\n# seq_qual_dict2, homopolymer_dict2, endBaseQual_dict2, allBaseQual_dict2 = overall_analyser(fq)\n\ndef get_fq_datum(fastq, mode):\n    if mode == 'sampling':\n        fq = pyfastx.Fastq(fastq)\n        seq_qual_dict, homopolymer_dict, endBaseQual_dict, allBaseQual_dict = sampling_analyser(fq, 1, 100)\n        sampling_fq_datum_dict = {\n            'seq_qual_dict': seq_qual_dict,\n            'homopolymer_dict': homopolymer_dict,\n            'endBaseQual_dict': endBaseQual_dict,\n            'allBaseQual_dict': allBaseQual_dict\n        }\n        return sampling_fq_datum_dict\n    elif mode == 'overall':\n        fq = pyfastx.Fastq(fastq)\n        seq_qual_dict, homopolymer_dict, endBaseQual_dict, allBaseQual_dict = overall_analyser(fq)\n        overall_fq_datum_dict = {\n            'seq_qual_dict': seq_qual_dict,\n            'homopolymer_dict': homopolymer_dict,\n            'endBaseQual_dict': endBaseQual_dict,\n            'allBaseQual_dict': allBaseQual_dict\n        }\n        return overall_fq_datum_dict\n    else:\n        print('please check the mode of parsing target data!')\nfastq = '../test/ecoli.fq.gz'\n# mode = 'sampling'\nmode = 'overall'\nmerged_fq_datum_dict = get_fq_datum(fastq, mode)\n\nimport pprint\n\nwith open( '../test/ecoli.seq.json', 'w') as file:\n    filewidth = len(merged_fq_datum_dict['seq_qual_dict']['ID'])+ 60\n    pprint.pprint(merged_fq_datum_dict, file, indent=4, width=filewidth, depth = 5, compact=True)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/fq_datum.py b/src/fq_datum.py
--- a/src/fq_datum.py	(revision 1d1c721df106c50e2ff22c89675ed0028efb002d)
+++ b/src/fq_datum.py	(date 1709113276560)
@@ -64,8 +64,7 @@
     return allBaseQual_dict
 
 def endBaseQualParse(seq, quali, shift_length, endBaseQual_dict):
-    if len(seq) > shift_length * 2 and '@' not in seq:
-        threads = []
+    if len(seq) > shift_length * 2 and '@' not in
         threads.append(Thread(target=endBaseHeadParse, args=(seq, shift_length, endBaseQual_dict)))
         threads.append(Thread(target=endBaseTailParse, args=(seq, shift_length, endBaseQual_dict)))
         threads.append(Thread(target=endQualHeadParse, args=(seq, quali, shift_length, endBaseQual_dict)))
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"42c1f74b-5fa4-4f29-a8b6-57c202b236f4\" name=\"Changes\" comment=\"fq_datum and fq_table function release!\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/fq_datum.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/fq_datum.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n        <option value=\"HTML File\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2cWCJAlCL01SNSeSm5YUMBKBedM\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n    <option name=\"showMembers\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\"><![CDATA[{\n  \"keyToString\": {\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\n    \"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\n    \"DefaultHtmlFileTemplate\": \"HTML File\",\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\n    \"git-widget-placeholder\": \"master\",\n    \"last_opened_file_path\": \"E:/Projects/Software_development/Cycads\",\n    \"settings.editor.selected.configurable\": \"File.Encoding\"\n  }\n}]]></component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"42c1f74b-5fa4-4f29-a8b6-57c202b236f4\" name=\"Changes\" comment=\"\" />\n      <created>1708217872577</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1708217872577</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Initial commit\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1708221783715</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1708221783715</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"test upload result\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1708222349672</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1708222349672</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"first upload\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1708222511451</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1708222511451</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"first upload\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1708222529026</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1708222529026</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"add empty src files\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1708236246088</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1708236246088</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"add empty src files\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1708236992241</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1708236992241</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"add reports html file\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1708246442131</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1708246442131</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"update pyfastx read script.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1708249022980</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1708249022980</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"fq_datum and fq_table updated!\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1708336912704</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1708336912704</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"fq_datum and fq_table updated!\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1708337960427</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1708337960427</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"fq_datum and fq_table updated!\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1708399218598</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1708399218598</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"fq_datum and fq_table function release!\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1708581588346</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1708581588346</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"fq_datum and fq_table function release!\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1708592481369</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1708592481369</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"14\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n    <MESSAGE value=\"first create\" />\n    <MESSAGE value=\"Initial commit\" />\n    <MESSAGE value=\"test upload result\" />\n    <MESSAGE value=\"first upload\" />\n    <MESSAGE value=\"add empty src files\" />\n    <MESSAGE value=\"add reports html file\" />\n    <MESSAGE value=\"update pyfastx read script.\" />\n    <MESSAGE value=\"fq_datum and fq_table updated!\" />\n    <MESSAGE value=\"fq_datum and fq_table function release!\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"fq_datum and fq_table function release!\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/main.py</url>\n          <line>8</line>\n          <option name=\"timeStamp\" value=\"1\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 1d1c721df106c50e2ff22c89675ed0028efb002d)
+++ b/.idea/workspace.xml	(date 1709113668573)
@@ -5,6 +5,7 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="42c1f74b-5fa4-4f29-a8b6-57c202b236f4" name="Changes" comment="fq_datum and fq_table function release!">
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/fq_datum.py" beforeDir="false" afterPath="$PROJECT_DIR$/src/fq_datum.py" afterDir="false" />
     </list>
@@ -23,10 +24,14 @@
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="MarkdownSettingsMigration">
     <option name="stateVersion" value="1" />
   </component>
+  <component name="ProjectColorInfo">{
+  &quot;associatedIndex&quot;: 7
+}</component>
   <component name="ProjectId" id="2cWCJAlCL01SNSeSm5YUMBKBedM" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true">
     <ConfirmationsSetting value="2" id="Add" />
@@ -41,12 +46,22 @@
     "ASKED_ADD_EXTERNAL_FILES": "true",
     "ASKED_SHARE_PROJECT_CONFIGURATION_FILES": "true",
     "DefaultHtmlFileTemplate": "HTML File",
+    "Python.bam_datum.executor": "Run",
+    "Python.fq_datum.executor": "Run",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "git-widget-placeholder": "master",
     "last_opened_file_path": "E:/Projects/Software_development/Cycads",
-    "settings.editor.selected.configurable": "File.Encoding"
+    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable"
   }
 }]]></component>
+  <component name="SharedIndexes">
+    <attachedChunks>
+      <set>
+        <option value="bundled-python-sdk-50da183f06c8-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.13135.95" />
+      </set>
+    </attachedChunks>
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
